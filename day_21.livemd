# Day 21

## Part 1

```elixir
Mix.install([{:kino, ">= 0.0.0"}, {:memoize, ">= 0.0.0"}])
```

```elixir
input = Kino.Input.textarea("input")
```

```elixir
defmodule Dice do
  def run(die_size, players, track_size) do
    players = players |> Enum.map(fn {player, pos} -> {0, player, pos} end) |> Enum.sort()

    1..die_size
    |> Stream.cycle()
    |> Stream.chunk_every(3)
    |> Enum.reduce_while({0, players}, fn rolls, {roll_count, [current_player | other_players]} ->
      {score, player_number, pos} = current_player

      new_pos = rem(pos + Enum.sum(rolls), track_size)

      new_score = score + new_pos + 1

      result = {roll_count + 3, other_players ++ [{new_score, player_number, new_pos}]}

      if new_score >= 1000 do
        {:halt, result}
      else
        {:cont, result}
      end
    end)
    |> then(fn {rolls, players} ->
      (players |> Enum.min() |> elem(0)) * rolls
    end)
  end
end

players =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    [_, player, pos] = Regex.run(~r/Player (\d+) starting position: (\d+)/, line)
    {String.to_integer(player), String.to_integer(pos) - 1}
  end)

Dice.run(100, players, 10)
```

```elixir
defmodule DiracDice do
  @rolls Enum.frequencies(
           for(roll1 <- 1..3, roll2 <- 1..3, roll3 <- 1..3, do: roll1 + roll2 + roll3)
         )

  defmemo run({score, player, pos}, p2, cache) do
    for {roll, multiplier} <- @rolls do
      if mult = cache[{pos, score, roll}] do
        {player, mult}
      else
        new_pos = rem(pos + roll, 10)
        new_score = score + new_pos + 1

        result = {new_score, player, new_pos}

        if new_score >= 21 do
          {player, multiplier}
        else
          run(p2, result, cache)
        end
      end
    end
  end
end

[p1, p2] = players |> Enum.map(fn {player, pos} -> {0, player, pos} end) |> Enum.sort()

cache =
  for pos <- 0..9,
      score <- 0..21,
      {roll, multiplier} <-
        Enum.frequencies(
          for(roll1 <- 1..3, roll2 <- 1..3, roll3 <- 1..3, do: roll1 + roll2 + roll3)
        ) do
          
    current_state = {pos, score, roll}

    new_pos = rem(pos + roll, 10)
    new_score = score + new_pos + 1

    next_state = if new_score >= 21 do
      {:halt, multiplier}
    else
      {new_pos, new_score}
  end
  |> Map.new()

p1
|> DiracDice.run(p2, cache)
|> List.flatten()
|> Enum.group_by(fn {k, _} -> k end, fn {_, v} -> v end)
|> Enum.map(fn {k, v} -> {k, Enum.sum(v)} end)
```
